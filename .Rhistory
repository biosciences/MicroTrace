nonzero_genes <- rowSums(counts[, 1:10] > 0) > 0
# Display the first 10 rows (genes) and first 10 columns (cells) with non-zero counts
head(counts[nonzero_genes, 1:10], 10)
# Calculate percentage of mitochondrial genes
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# View the first few rows of the metadata with QC metrics
head(pbmc@meta.data)
library(Seurat)
library(ggplot2)
# Violin plots of features
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter plot: total counts vs. gene counts
FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
# Total counts vs. percent mitochondrial
FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
# Keep cells with:
# - between 200 and 2500 detected genes
# - <5% mitochondrial RNA content
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc)
head(GetAssayData(pbmc, layer = "data")[, 1:10])
head(GetAssayData(pbmc, layer = "data")[, 1:10])
normalized_counts <- GetAssayData(pbmc, layer = "data")
normalized_nonzero_genes <- rowSums(normalized_counts[, 1:10] > 0) > 0
head(counts[normalized_nonzero_genes, 1:10], 10)
head(normalized_counts[normalized_nonzero_genes, 1:10], 10)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
head(VariableFeatures(pbmc), 10)
pbmc <- ScaleData(pbmc)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
pbmc <- RunUMAP(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "umap", label = TRUE)
markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
head(markers)
library(Seurat)
library(ggplot2)
library(patchwork)
library(SeuratData)
install.packages("SeuratData")
install.packages("patchwork")
SeuratData::InstallData("stxBrain")
library(SeuratData)
install.packages("SeuratData")
library(remotes)
install.packages("remotes")  # if not already installed
remotes::install_github("satijalab/seurat-data")
library(SeuratData)
SeuratData::AvailableData()
SeuratData::InstallData("pbmc3k")
SeuratData::InstallData("stxBrain")
pbmc.data <- Read10X(data.dir = "https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_3k/pbmc_3k_filtered_gene_bc_matrices.tar.gz")
library(Seurat)
library(ggplot2)
library(patchwork)
pbmc.data <- Read10X(data.dir = "https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_3k/pbmc_3k_filtered_gene_bc_matrices.tar.gz")
install.packages("Seurat", dependencies = TRUE)
library(Seurat)
library(ggplot2)
library(patchwork)
pbmc.data <- Read10X(data.dir = "https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_3k/pbmc_3k_filtered_gene_bc_matrices.tar.gz")
library(SeuratData)
InstallData("pbmc3k")
data("pbmc3k")
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
pbmc.data <- SeuratData::data("pbmc3k")
pbmc.data <- data("pbmc3k")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc.data <- GetAssayData(pbmc3k, slot = "counts")  # extract raw counts
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k",
min.cells = 3, min.features = 200)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
head(VariableFeatures(pbmc))
pbmc <- ScaleData(pbmc)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
ElbowPlot(pbmc)     # See how much information is retained in the first few principal components
VizDimLoadings(pbmc, dims = 1:2)  # Check which genes contribute most to the first and second principal
DimPlot(pbmc, reduction = "pca")
library(tidyverse)
library(DESeq2)
install.packages("tidyverse", "DESeq2", "ComplexHeatmap", "RColorBrewer", "GenomicRanges")
install.packages("tidyverse")
library("tidyverse")
install.packages("DESeq2")
BiocManager::install("DESeq2")
library(DESeq2)
install.packages("ComplexHeatmap")
library(ComplexHeatmap)
BiocManager::install("ComplexHeatmap")
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
install.packages("RColorBrewer")
install.packages("RColorBrewer")
ibrary(RColorBrewer)
BiocManager::install("RColorBrewer")
library
library(RColorBrewer)
install.packages("GenomicRanges")
BiocManager::install(GenomicRanges")
BiocManager::install("GenomicRanges")
library(GenomicRanges)
BiocManager::install("MOFA2")
library(MOFA2)
counts <- read.csv("https://figshare.com/ndownloader/files/26020911", row.names = 1)
BiocManager::install("mixOmics")
library(mixOmics)
library(MOFA2)
library(dplyr)
library(ggplot2)
set.seed(123)
n_samples <- 50
n_genes <- 100
n_proteins <- 80
transcriptomics <- matrix(rnorm(n_samples * n_genes, mean=10, sd=2), nrow=n_samples)
rownames(transcriptomics) <- paste0("Sample_", 1:n_samples)
colnames(transcriptomics) <- paste0("Gene_", 1:n_genes)
transcriptomics
proteomics <- matrix(rnorm(n_samples * n_proteins, mean=5, sd=1.5), nrow=n_samples)
rownames(proteomics) <- paste0("Sample_", 1:n_samples)
colnames(proteomics) <- paste0("Protein_", 1:n_proteins)
proteomics
transcriptomics_norm <- log2(transcriptomics + 1)
transcriptomics_norm
proteomics_norm <- scale(proteomics)
proteomics_norm
# 3. Canonical Correlation Analysis (CCA) with mixOmics
# Prepare data for CCA
X <- transcriptomics_norm
Y <- proteomics_norm
# Perform CCA
cca_result <- rcc(X, Y, ncomp=2, lambda1=0.1, lambda2=0.1)
cca_result
plotVar(cca_result, var.names = FALSE, cex = 0.5,
title = "CCA Correlation Circle Plot")
# Option 1: Simple vector
plotVar(cca_result, var.names = FALSE, cex = c(0.5, 0.5),
title = "CCA Correlation Circle Plot")
mofa_data <- list(
Transcriptomics = t(transcriptomics_norm),
Proteomics = t(proteomics_norm)
)
mofa_model <- create_mofa(mofa_data)
mofa_model
mofa_options <- get_default_model_options(mofa_model)
mofa_options$num_factors <- 10
mofa_options$scale_views <- TRUE
# Train MOFA model
mofa_trained <- run_mofa(mofa_model, mofa_options)
# Prepare the MOFA model for training
mofa_model <- prepare_mofa(mofa_model, mofa_options)
# Prepare data for MOFA
mofa_data <- list(
Transcriptomics = t(transcriptomics_norm),
Proteomics = t(proteomics_norm)
)
# Create MOFA object
mofa_model <- create_mofa(mofa_data)
# Set model options
mofa_options <- get_default_model_options(mofa_model)
mofa_options$num_factors <- 10
mofa_options$scale_views <- TRUE
# Set data options
data_options <- get_default_data_options(mofa_model)
# Optional: Customize data options if needed
data_options$scale <- TRUE  # Scale data to unit variance
data_options$center <- TRUE # Center data
# Prepare MOFA model with both data and model options
mofa_model <- prepare_mofa(mofa_model, data_options = data_options, model_options = mofa_options)
# Prepare data for MOFA
mofa_data <- list(
Transcriptomics = t(transcriptomics_norm),
Proteomics = t(proteomics_norm)
)
# Create MOFA object
mofa_model <- create_mofa(mofa_data)
# Set model options
mofa_options <- get_default_model_options(mofa_model)
mofa_options$num_factors <- 10
mofa_options$scale_views <- TRUE
# Set data options
data_options <- get_default_data_options(mofa_model)
# Optional: Customize data options if needed
data_options$scale <- TRUE  # Scale data to unit variance
data_options$center <- TRUE # Center data
# Prepare MOFA model with both data and model options
mofa_model <- prepare_mofa(mofa_model, data_options = data_options, model_options = mofa_options)
# Load required libraries
library(MOFA2)
# Prepare data for MOFA (ensure correct format: features as rows, samples as columns)
mofa_data <- list(
Transcriptomics = t(transcriptomics_norm), # 100 genes x 50 samples
Proteomics = t(proteomics_norm)           # 80 proteins x 50 samples
)
# Verify data dimensions and no missing values
cat("Dimensions of Transcriptomics:", dim(mofa_data$Transcriptomics), "\n")
cat("Dimensions of Proteomics:", dim(mofa_data$Proteomics), "\n")
cat("Missing values in Transcriptomics:", sum(is.na(mofa_data$Transcriptomics)), "\n")
cat("Missing values in Proteomics:", sum(is.na(mofa_data$Proteomics)), "\n")
mofa_model <- create_mofa(mofa_data)
# Set data options
data_options <- get_default_data_options(mofa_model)
# Explicitly set key options
data_options$scale <- TRUE   # Scale data to unit variance
data_options$center <- TRUE  # Center data by subtracting the mean
data_options$use_samples <- NULL  # Use all samples
data_options$use_features <- NULL  # Use all features
# Set model options
mofa_options <- get_default_model_options(mofa_model)
mofa_options$num_factors <- 10
mofa_options$scale_views <- TRUE
# Prepare MOFA model
mofa_model <- prepare_mofa(mofa_model,
data_options = data_options,
model_options = mofa_options)
set.seed(123)
n_samples <- 50
n_genes <- 100
rna_seq <- matrix(rnorm(n_samples * n_genes, mean=10, sd=2), nrow=n_samples)
rownames(rna_seq) <- paste0("Sample_", 1:n_samples)
colnames(rna_seq) <- paste0("Gene_", 1:n_genes)
# Simulate genomic data (50 samples, 200 SNPs, encoded as 0/1/2)
n_snps <- 200
genomic <- matrix(sample(0:2, n_samples * n_snps, replace=TRUE), nrow=n_samples)
rownames(genomic) <- paste0("Sample_", 1:n_samples)
colnames(genomic) <- paste0("SNP_", 1:n_snps)
# Preprocess data
rna_seq_norm <- log2(rna_seq + 1)  # Log-transform RNA-seq
genomic_norm <- scale(genomic)     # Standardize SNP data
rna_seq_norm
genomic_norm
# Perform sparse PLS for integration
spls_result <- spls(X = rna_seq_norm, Y = genomic_norm, ncomp = 2,
keepX = c(10, 10), keepY = c(20, 20))  # Select 10 genes, 20 SNPs per component
# Visualize with correlation circle plot
plotVar(spls_result, var.names = FALSE, cex = c(0.5, 0.5),
title = "sPLS Correlation Circle Plot: RNA-seq vs Genomic")
pls_result <- spls(X = rna_seq_norm, Y = genomic_norm, ncomp = 2,
keepX = c(10, 10), keepY = c(20, 20))  # Select 10 genes, 20 SNPs per component
# Visualize correlation circle plot
plotVar(spls_result, var.names = FALSE, cex = c(0.5, 0.5),
title = "sPLS Correlation Circle Plot: RNA-seq vs Genomic")
spls_loadings_X <- selectVar(spls_result, comp = 1)$X  # Top genes
spls_loadings_Y <- selectVar(spls_result, comp = 1)$Y  # Top SNPs
cat("Top 10 RNA-seq genes (Component 1):\n")
print(head(spls_loadings_X, 10))
cat("Top 20 SNPs (Component 1):\n")
print(head(spls_loadings_Y, 20))
# 4. DIABLO for supervised multi-omics integration
# Prepare data as a named list for DIABLO
data_list <- list(RNAseq = rna_seq_norm, Genomic = genomic_norm)
# Design matrix for supervised analysis (binary outcome)
design <- matrix(0.1, nrow = 2, ncol = 2,
dimnames = list(c("RNAseq", "Genomic"), c("RNAseq", "Genomic")))
diag(design) <- 0  # Focus on outcome, not block correlations
# Run DIABLO
diablo_result <- block.splsda(X = data_list, Y = outcome, ncomp = 2,
keepX = list(RNAseq = c(10, 10), Genomic = c(20, 20)))
# 4. DIABLO for supervised multi-omics integration
# Prepare data as a named list for DIABLO
data_list <- list(RNAseq = rna_seq_norm, Genomic = genomic_norm)
# Design matrix for supervised analysis (binary outcome)
design <- matrix(0.1, nrow = 2, ncol = 2,
dimnames = list(c("RNAseq", "Genomic"), c("RNAseq", "Genomic")))
diag(design) <- 0  # Focus on outcome, not block correlations
diablo_result <- block.splsda(X = data_list, Y = outcome, ncomp = 2,
keepX = list(RNAseq = c(10, 10), Genomic = c(20, 20)))
rna_seq <- matrix(rnorm(n_samples * n_genes, mean=10, sd=2), nrow=n_samples)
rownames(rna_seq) <- paste0("Sample_", 1:n_samples)
colnames(rna_seq) <- paste0("Gene_", 1:n_genes)
# Simulated genomic data (SNPs)
genomic <- matrix(sample(0:2, n_samples * n_snps, replace=TRUE), nrow=n_samples)
rownames(genomic) <- paste0("Sample_", 1:n_samples)
colnames(genomic) <- paste0("SNP_", 1:n_snps)
# Define outcome (binary factor for supervised analysis)
outcome <- factor(sample(c("Disease", "Control"), n_samples, replace=TRUE),
levels = c("Disease", "Control"))
# 2. Preprocess data
rna_seq_norm <- log2(rna_seq + 1)  # Log-transform RNA-seq
genomic_norm <- scale(genomic)     # Standardize SNP data
# 3. Prepare data for DIABLO
data_list <- list(RNAseq = rna_seq_norm, Genomic = genomic_norm)
# Design matrix for DIABLO (focus on outcome prediction)
design <- matrix(0.1, nrow = 2, ncol = 2,
dimnames = list(c("RNAseq", "Genomic"), c("RNAseq", "Genomic")))
diag(design) <- 0  # Emphasize outcome over block correlations
# 4. Run DIABLO
diablo_result <- block.splsda(X = data_list, Y = outcome, ncomp = 2,
keepX = list(RNAseq = c(10, 10), Genomic = c(20, 20)))
# 5. Visualize sample plot
plotIndiv(diablo_result, ind.names = FALSE, legend = TRUE,
title = "DIABLO Sample Plot by Outcome")
# 6. Extract top biomarkers
diablo_biomarkers_RNAseq <- selectVar(diablo_result, block = "RNAseq", comp = 1)$RNAseq
diablo_biomarkers_Genomic <- selectVar(diablo_result, block = "Genomic", comp = 1)$Genomic
cat("Top 10 RNA-seq biomarkers (Component 1):\n")
print(head(diablo_biomarkers_RNAseq, 10))
cat("Top 20 Genomic biomarkers (Component 1):\n")
print(head(diablo_biomarkers_Genomic, 20))
library(ape)
library(ggplot2)
library(readr)
library(dendextend)
install.packages("dendextend")
library(dendextend)
library(dplyr)
# =============================
# MicroTrace Core Functions
# =============================
# Load distance matrix from CSV
distance_loader <- function(path) {
dist_matrix <- as.matrix(read_csv(path, show_col_types = FALSE))
rownames(dist_matrix) <- colnames(dist_matrix) <- dist_matrix[, 1]
dist_matrix <- dist_matrix[, -1]
as.dist(dist_matrix)
}
# Recommend threshold based on SNP distance histogram
auto_threshold_suggestion <- function(dist_obj) {
dvals <- as.numeric(dist_obj)
hist(dvals, main = "SNP Distance Distribution", xlab = "Distance", col = "lightblue")
suggestion <- quantile(dvals, 0.1)  # e.g., lower 10% as conservative outbreak cut
cat("Suggested threshold (10th percentile):", round(suggestion, 2), "SNPs\n")
return(suggestion)
}
# Perform hierarchical clustering and output plots + clusters
run_microtrace_clustering <- function(dist_obj, threshold = 5, output_prefix = "data/", dendro_path = "docs/example_dendrogram.png", metadata_path = NULL) {
hc <- hclust(dist_obj, method = "average")
clusters <- cutree(hc, h = threshold)
cluster_df <- data.frame(Sample = names(clusters), Cluster = clusters)
# Optional: integrate metadata
if (!is.null(metadata_path) && file.exists(metadata_path)) {
meta <- read_csv(metadata_path, show_col_types = FALSE)
cluster_df <- left_join(cluster_df, meta, by = "Sample")
}
# Save cluster assignments
write_csv(cluster_df, paste0(output_prefix, "cluster_assignments.csv"))
# Dendrogram plot
png(dendro_path, width = 800, height = 600)
plot(as.dendrogram(hc), main = paste("MicroTrace SNP Clustering (h =", threshold, ")"), xlab = "Samples", sub = "", ylab = "SNP Distance")
abline(h = threshold, col = "red", lty = 2)
dev.off()
cat("Clustering complete.\nOutput: \n -", paste0(output_prefix, "cluster_assignments.csv"), "\n -", dendro_path, "\n")
}
dist_path <- "data/sim_snp_dist.csv"
dist_obj <- distance_loader(dist_path)
setwd(/Users/kl/Downloads/MicroTrace)
setwd("/Users/kl/Downloads/MicroTrace")
dist_path <- "data/sim_snp_dist.csv"
dist_obj <- distance_loader(dist_path)
distance_loader <- function(path) {
df <- read_csv(path, show_col_types = FALSE)
rownames(df) <- df$Sample
dist_matrix <- as.matrix(df[, -1])  # exclude Sample column
return(as.dist(dist_matrix))
}
# Recommend threshold based on SNP distance histogram
auto_threshold_suggestion <- function(dist_obj) {
dvals <- as.numeric(dist_obj)
hist(dvals, main = "SNP Distance Distribution", xlab = "Distance", col = "lightblue")
suggestion <- quantile(dvals, 0.1)  # e.g., lower 10% as conservative outbreak cut
cat("Suggested threshold (10th percentile):", round(suggestion, 2), "SNPs\n")
return(suggestion)
}
# Perform hierarchical clustering and output plots + clusters
run_microtrace_clustering <- function(dist_obj, threshold = 5, output_prefix = "data/", dendro_path = "docs/example_dendrogram.png", metadata_path = NULL) {
hc <- hclust(dist_obj, method = "average")
clusters <- cutree(hc, h = threshold)
cluster_df <- data.frame(Sample = names(clusters), Cluster = clusters)
# Optional: integrate metadata
if (!is.null(metadata_path) && file.exists(metadata_path)) {
meta <- read_csv(metadata_path, show_col_types = FALSE)
cluster_df <- left_join(cluster_df, meta, by = "Sample")
}
# Save cluster assignments
write_csv(cluster_df, paste0(output_prefix, "cluster_assignments.csv"))
# Dendrogram plot
png(dendro_path, width = 800, height = 600)
plot(as.dendrogram(hc), main = paste("MicroTrace SNP Clustering (h =", threshold, ")"), xlab = "Samples", sub = "", ylab = "SNP Distance")
abline(h = threshold, col = "red", lty = 2)
dev.off()
cat("Clustering complete.\nOutput: \n -", paste0(output_prefix, "cluster_assignments.csv"), "\n -", dendro_path, "\n")
}
dist_path <- "data/sim_snp_dist.csv"
dist_obj <- distance_loader(dist_path)
distance_loader <- function(path) {
df <- as.data.frame(read_csv(path, show_col_types = FALSE))  # convert tibble to data.frame
rownames(df) <- df$Sample
dist_matrix <- as.matrix(df[, -1])  # exclude Sample column
return(as.dist(dist_matrix))
}
dist_obj <- distance_loader(dist_path)
auto_threshold_suggestion(dist_obj)
run_microtrace_clustering(dist_obj, threshold = 5, metadata_path = "data/metadata.csv")
library(testthat)
source("../MicroTrace.R")
source("./MicroTrace.R")
test_that("distance_loader loads correct dimensions", {
dist_obj <- distance_loader("../data/sim_snp_dist.csv")
expect_true(inherits(dist_obj, "dist"))
expect_equal(attr(dist_obj, "Size"), 10)  # Should be 10 samples
})
setwd("/Users/kl/Downloads/MicroTrace/tests")
source("../MicroTrace.R")
test_that("distance_loader loads correct dimensions", {
dist_obj <- distance_loader("../data/sim_snp_dist.csv")
expect_true(inherits(dist_obj, "dist"))
expect_equal(attr(dist_obj, "Size"), 10)  # Should be 10 samples
})
test_that("distance_loader loads correct dimensions", {
dist_obj <- distance_loader("../data/sim_snp_dist.csv")
expect_true(inherits(dist_obj, "dist"))
expect_equal(attr(dist_obj, "Size"), 10)  # Should be 10 samples
})
test_that("distance_loader loads correct dimensions", {
dist_obj <- distance_loader("../data/sim_snp_dist.csv")
expect_true(inherits(dist_obj, "dist"))
expect_equal(attr(dist_obj, "Size"), 10)  # Should be 10 samples
})
# Test 2: Threshold suggestion within expected range
test_that("auto_threshold_suggestion returns numeric", {
dist_obj <- distance_loader("../data/sim_snp_dist.csv")
threshold <- auto_threshold_suggestion(dist_obj)
expect_true(is.numeric(threshold))
expect_true(threshold >= 0)
})
# Test 3: Full clustering run with metadata
test_that("Clustering completes and outputs exist", {
dist_obj <- distance_loader("../data/sim_snp_dist.csv")
run_microtrace_clustering(
dist_obj,
threshold = 5,
metadata_path = "../data/metadata.csv"
)
expect_true(file.exists("../data/cluster_assignments.csv"))
expect_true(file.exists("../docs/example_dendrogram.png"))
})
getwd()
source("../MicroTrace.R")
# Test 3: Full clustering run with metadata
test_that("Clustering completes and outputs exist", {
dist_obj <- distance_loader("../data/sim_snp_dist.csv")
run_microtrace_clustering(
dist_obj,
threshold = 5,
metadata_path = "../data/metadata.csv"
)
expect_true(file.exists("../data/cluster_assignments.csv"))
expect_true(file.exists("../docs/example_dendrogram.png"))
})
source("../MicroTrace.R")
source("../MicroTrace.R")
getwd
getwd()
getwd("/Users/kl/Downloads/MicroTrace")
setwd("/Users/kl/Downloads/MicroTrace")
source("../MicroTrace.R")
source("./MicroTrace.R")
library(testthat)
library(readr)
# Test 1: Load matrix
test_that("distance_loader loads correct dimensions", {
dist_obj <- distance_loader("./data/sim_snp_dist.csv")
expect_true(inherits(dist_obj, "dist"))
expect_equal(attr(dist_obj, "Size"), 10)  # Should be 10 samples
})
# Test 2: Threshold suggestion within expected range
test_that("auto_threshold_suggestion returns numeric", {
dist_obj <- distance_loader("./data/sim_snp_dist.csv")
threshold <- auto_threshold_suggestion(dist_obj)
expect_true(is.numeric(threshold))
expect_true(threshold >= 0)
})
# Test 3: Full clustering run with metadata
test_that("Clustering completes and outputs exist", {
dist_obj <- distance_loader("./data/sim_snp_dist.csv")
run_microtrace_clustering(
dist_obj,
threshold = 5,
metadata_path = "../data/metadata.csv"
)
expect_true(file.exists("./data/cluster_assignments.csv"))
expect_true(file.exists("./docs/example_dendrogram.png"))
})
rmarkdown::render("MicroTrace_Report.Rmd")
run_microtrace_clustering <- function(dist_obj, threshold = 5, output_prefix = "data/", dendro_path = "docs/example_dendrogram.png", metadata_path = NULL) {
# Ensure output directories exist
dir.create(output_prefix, recursive = TRUE, showWarnings = FALSE)
dir.create(dirname(dendro_path), recursive = TRUE, showWarnings = FALSE)
hc <- hclust(dist_obj, method = "average")
clusters <- cutree(hc, h = threshold)
cluster_df <- data.frame(Sample = names(clusters), Cluster = clusters)
# Optional: integrate metadata
if (!is.null(metadata_path) && file.exists(metadata_path)) {
meta <- read_csv(metadata_path, show_col_types = FALSE)
cluster_df <- left_join(cluster_df, meta, by = "Sample")
}
# Save cluster assignments
write_csv(cluster_df[, c("Sample", "Cluster", "Collection_Date", "Ward", "Patient_ID")],
paste0(output_prefix, "cluster_assignments.csv"))
# Dendrogram plot
png(dendro_path, width = 800, height = 600)
plot(as.dendrogram(hc), main = paste("MicroTrace SNP Clustering (h =", threshold, ")"), xlab = "Samples", sub = "", ylab = "SNP Distance")
abline(h = threshold, col = "red", lty = 2)
dev.off()
cat("Clustering complete.\nOutput: \n -", paste0(output_prefix, "cluster_assignments.csv"), "\n -", dendro_path, "\n")
}
run_microtrace_clustering(dist_obj, threshold = 5, metadata_path = "data/metadata.csv")
rmarkdown::render("MicroTrace_Report.Rmd")
